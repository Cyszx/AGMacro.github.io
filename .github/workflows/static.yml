name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Fetch Latest Release Info
        id: latest_release
        run: |
          echo "Debug: Starting release info fetch..."
          
          # Fetch CysMacros Release
          echo "Debug: Fetching CysMacros release..."
          MACRO_RELEASE=$(curl -s -H "Accept: application/vnd.github+json" https://api.github.com/repos/Cyszx/AGMacro.github.io/releases/latest)        
          echo "Debug: CysMacros Release response: $MACRO_RELEASE" 
          
          if [[ $(echo "$MACRO_RELEASE" | jq 'has("message")') == "true" && $(echo "$MACRO_RELEASE" | jq -r '.message') == "Not Found" ]]; then
            echo "Debug: CysMacros repository or release not found"
            echo "MACRO_ZIP_NAME=Not Available" >> $GITHUB_ENV
            echo "MACRO_DOWNLOAD_URL=#" >> $GITHUB_ENV
          elif [[ $(echo "$MACRO_RELEASE" | jq 'has("assets")') == "true" ]]; then
            echo "Debug: Found CysMacros release with assets"
            MACRO_ZIP=$(echo "$MACRO_RELEASE" | jq -r '.assets[] | select(.name | endswith(".zip")) | {name: .name, url: .browser_download_url}' | jq -s '.[0]')
            
            if [[ ! -z "$MACRO_ZIP" && "$MACRO_ZIP" != "null" ]]; then
              MACRO_NAME=$(echo "$MACRO_ZIP" | jq -r '.name')
              MACRO_URL=$(echo "$MACRO_ZIP" | jq -r '.url')
              echo "MACRO_ZIP_NAME=$MACRO_NAME" >> $GITHUB_ENV
              echo "MACRO_DOWNLOAD_URL=$MACRO_URL" >> $GITHUB_ENV
              echo "Debug: CysMacros variables set - Name: $MACRO_NAME, URL: $MACRO_URL"
            else
              echo "Debug: No CysMacros ZIP found"
              echo "MACRO_ZIP_NAME=No ZIP Available" >> $GITHUB_ENV
              echo "MACRO_DOWNLOAD_URL=#" >> $GITHUB_ENV
            fi
          else
            echo "Debug: No valid CysMacros release or assets found"
            echo "MACRO_ZIP_NAME=Not Available" >> $GITHUB_ENV
            echo "MACRO_DOWNLOAD_URL=#" >> $GITHUB_ENV
          fi

          # Fetch Anime Royale Release
          echo "Debug: Fetching Anime Royale release..."
          ANIME_RELEASE=$(curl -s -H "Accept: application/vnd.github+json" https://api.github.com/repos/Cyszx/Anime-Royale-Macro/releases/latest)
          echo "Debug: Anime Royale Release response: $ANIME_RELEASE"
          
          if [[ $(echo "$ANIME_RELEASE" | jq 'has("message")') == "true" && $(echo "$ANIME_RELEASE" | jq -r '.message') == "Not Found" ]]; then
            echo "Debug: Anime Royale repository or release not found"
            echo "ANIME_ZIP_NAME=Not Available" >> $GITHUB_ENV
            echo "ANIME_DOWNLOAD_URL=#" >> $GITHUB_ENV
          elif [[ $(echo "$ANIME_RELEASE" | jq 'has("assets")') == "true" ]]; then
            echo "Debug: Found Anime Royale release with assets"
            ANIME_ZIP=$(echo "$ANIME_RELEASE" | jq -r '.assets[] | select(.name | endswith(".zip")) | {name: .name, url: .browser_download_url}' | jq -s '.[0]')
            
            if [[ ! -z "$ANIME_ZIP" && "$ANIME_ZIP" != "null" ]]; then
              ANIME_NAME=$(echo "$ANIME_ZIP" | jq -r '.name')
              ANIME_URL=$(echo "$ANIME_ZIP" | jq -r '.url')
              echo "ANIME_ZIP_NAME=$ANIME_NAME" >> $GITHUB_ENV
              echo "ANIME_DOWNLOAD_URL=$ANIME_URL" >> $GITHUB_ENV
              echo "Debug: Anime Royale variables set - Name: $ANIME_NAME, URL: $ANIME_URL"
            else
              echo "Debug: No Anime Royale ZIP found"
              echo "ANIME_ZIP_NAME=No ZIP Available" >> $GITHUB_ENV
              echo "ANIME_DOWNLOAD_URL=#" >> $GITHUB_ENV
            fi
          else
            echo "Debug: No valid Anime Royale release or assets found"
            echo "ANIME_ZIP_NAME=Not Available" >> $GITHUB_ENV
            echo "ANIME_DOWNLOAD_URL=#" >> $GITHUB_ENV
          fi

      - name: Create Dynamic Download Page
        run: |
          echo "Debug: Creating download page..."
          mkdir -p _site
          
          # Generate the HTML content
          HTML_CONTENT=$(cat << 'HEREDOC'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Cys Macros</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
            <style>/* Your existing CSS */</style>
          </head>
          <body>
            <div class="container">
              <h1>Cys Macros</h1>
              <div class="games-grid">
                <div class="game-card">
                  <h2>CysMacros</h2>
                  <p>Anime Guardians Macro</p>
                  <div class="version-tag">Latest Version</div>
                </div>
                <div class="game-card">
                  <h2>Anime Royale</h2>
                  <p>Anime Royale Macro</p>
                  <div class="version-tag">Latest Version</div>
                </div>
              </div>
            </div>
          </body>
          </html>
          HEREDOC
          )

          # Write to file
          echo "$HTML_CONTENT" > _site/index.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
